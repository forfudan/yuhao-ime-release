# Rime schema settings
# encoding: utf-8

schema:
  schema_id: yuming
  name: 日月·大明
  version: 乙巳立夏
  author:
    - 作者 朱宇浩
    - 官方網站 <https://shurufa.app>
    - 官方QQ群 735728797
  description: |
    日月輸入法，又稱大明輸入法、明碼。
    基於宇浩拆分設計製作，是世上第一款純形前綴碼方案，可完全離開空格鍵進行輸入。
    其名源自尚書大傳之「日月有常，星辰有行」。
  dependencies:
    - yuhao_pinyin
    - yuming_chaifen
    - yuming_chaifen_tw

switches:
  - options:
      - original
      - yuhao_charset_prioritizer_common
    states: [原始排序, 常用字優先]
    reset: 0
    # Control+Shift+M
  - options:
      - cjk
      - yuhao_charset_filter_common
      - yuhao_charset_filter_tonggui
      - yuhao_charset_filter_harmonic
    states: [全漢字, 常用字, 簡化字, 傳統字]
    reset: 0
    # Control+Shift+O
  - name: yuhao_single_char_only_for_full_code
    states: [字詞同出, 全碼出單]
    reset: 0
    # Control+Shift+D
  - options:
      - yuhao_chaifen.off
      - yuhao_chaifen.lv2
      - yuhao_chaifen.lv3
    states: [無註解, 二重註解, 多重註解]
    reset: 0
  - options:
      - yuhao_autocompletion_conditional_filter
      - yuhao_autocompletion_filter
      - all_aultocompletion
    states: [韻碼提示, 精確匹配, 輸入預測]
    reset: 0
    # Control+Shift+Y
  - name: yuhao_hide_space_candidates
    states: [有空格簡, 無空格簡]
    reset: 0
  - name: yuhao_chaifen_source
    states: [陸標拆分, 臺標拆分]
    reset: 0
    # Control+Shift+L
  - name: traditionalization
    states: [简保持, 简转繁]
    reset: 0
    # Control+Shift+F
  - name: simplification
    states: [繁保持, 繁轉簡]
    reset: 0
    # Control+Shift+J
  - name: ascii_mode
    states: [中文, 西文]
    reset: 0
  - name: full_shape
    states: ["半角", "全角"]
    reset: 0
  - name: ascii_punct
    states: [。，, ．，]
    reset: 0

engine:
  processors:
    - lua_processor@*yuhao.yuhao_switch_proc@yuhao_macro
    - ascii_composer
    - recognizer
    - lua_processor@*yuhao.yuhao_chaifen_processor
    - key_binder
    - lua_processor@*yuhao.yuhao_auto_select_postponed
    - speller
    - punctuator
    - selector
    - navigator
    - express_editor
  segmentors:
    - ascii_segmentor
    - matcher
    - abc_segmentor
    - punct_segmentor
    - fallback_segmentor
  translators:
    - punct_translator
    - history_translator@history
    - reverse_lookup_translator
    - table_translator
    - lua_translator@*yuhao.yuhao_switch_tr@yuhao_macro  # 控制臺
  filters:
    - lua_filter@*yuhao.yuhao_pop_candidate
    - lua_filter@*yuhao.yuhao_hide_space_candidates
    - lua_filter@*yuhao.yuhao_autocompletion_filter
    - lua_filter@*yuhao.yuhao_autocompletion_conditional_filter
    - lua_filter@*yuhao.yuhao_single_char_only_for_full_code
    - lua_filter@*yuhao.yuhao_charset_filter_common
    - lua_filter@*yuhao.yuhao_charset_filter_tonggui
    - lua_filter@*yuhao.yuhao_charset_filter_harmonic
    - simplifier@traditionalize
    - simplifier@simplify
    - lua_filter@*yuhao.yuhao_chaifen_filter
    - lua_filter@*yuhao.yuhao_charset_prioritizer_common
    - uniquifier
    - lua_filter@*yuhao.yuhao_add_placeholder_candidate
    - lua_filter@*yuhao.yuhao_unicode_input

traditionalize:
  tags: [abc, reverse_lookup]
  option_name: traditionalization
  opencc_config: s2t.json
  tips: all
  comment_format:
    - xform/^/〔/
    - xform/$/〕/

simplify:
  tags: [abc, reverse_lookup]
  option_name: simplification
  opencc_config: t2s.json
  tips: all
  comment_format:
    - xform/^/〔/
    - xform/$/〕/

schema_name:
  code: yuming
  code_tw: yuming_tw
  spelling: yuming_chaifen
  spelling_tw: yuming_chaifen_tw

yuhao_chaifen:
  lua:
    switch_key: "Control+c"
    cycle_key: "Shift+Control+C"
    phrase: 0

speller:
  alphabet: zyxwvutsrqponmlkjihgfedcba/=
  initials: zyxwvutsrqponmlkjihgfedcba/=
  delimiter: "`"
  # max_code_length: 0
  auto_select: true
  # algebra:
  #   - xform/^([a-z]{1,5})[a-z]*$/$1/

translator:
  dictionary: yuming
  prism: yuming
  db_class: tabledb
  enable_completion: true
  enable_sentence: false
  enable_user_dict: false
  enable_encoder: false
  encode_commit_history: false # 对连续上屏的词自动成词
  max_phrase_length: 4 # 自动成词的最大词长
  preedit_format: []
  comment_format:
    - "xform/^~/ /"
  disable_user_dict_for_patterns:
    - "^z.*$"

history:
  input: z
  size: 9
  initial_quality: 1

reverse_lookup:
  dictionary: yuhao_pinyin
  prefix: "z"
  tips: 〔全拼簡拼反查〕
  closing_tips: 〔反查关闭〕
  preedit_format:
    - xform/([nl])v/$1ü/
    - xform/([nl])ue/$1üe/
    - xform/([jqxy])v/$1u/

# 自定義宏
yuhao_macro:
  funckeys:
    macro: [0x2f] # 當輸入串以 "/" 開頭時, 認爲是宏調用
  macros:
    help:
      - { type: switch, name: yuhao_single_char_only_for_full_code, states: [☐字詞同出, ☑全碼出單] }
      - { type: switch, name: yuhao_hide_space_candidates, states: [☐有空格簡, ☑無空格簡] }
      - { type: switch, name: yuhao_chaifen_source, states: [☐陸標拆分, ☑臺標拆分] }
      - { type: switch, name: traditionalization, states: [☐简保持, ☑简转繁] }
      - { type: switch, name: simplification, states: [☐繁保持, ☑繁轉簡] }
      - { type: switch, name: full_shape, states: [☐半角, ☑全角] }
      - { type: switch, name: ascii_punct, states: [☐中文標點, ☑西文標點] }
    date:
      - { type: eval, name: ☀日期, expr: return os.date("%Y-%m-%d") }
      - { type: eval, name: ⛅年月日, expr: return os.date("%Y年%m月%d日") }
    time:
      - { type: eval, name: ⌚時間, expr: return os.date("%H:%M:%S") }
      - { type: eval, name: Ⓣ時間, expr: return os.date("%Y%m%d%H%M") }
      - { type: eval, name: Ⓢ時間戳, expr: return tostring(os.time()) }
    char:
      - {
          type: radio,
          names:
            [
              cjk,
              yuhao_charset_filter_common,
              yuhao_charset_filter_tonggui,
              yuhao_charset_filter_harmonic,
            ],
          states: [☐☐全漢字, ☐☑常用字, ☑☐通規字, ☑☑陸標繁],
        }
    cjk:
      - {
          type: radio,
          names:
            [
              cjk,
              yuhao_charset_filter_common,
              yuhao_charset_filter_tonggui,
              yuhao_charset_filter_harmonic,
            ],
          states: [☐☐全漢字, ☐☑常用字, ☑☐通規字, ☑☑陸標繁],
        }
    word:
      - {
          type: switch,
          name: yuhao_single_char_only_for_full_code,
          states: [☐字詞, ☑純單],
        }
    auto:
      - {
      type: radio,
      names: [yuhao_autocompletion_conditional_filter, yuhao_autocompletion_filter, all_aultocompletion],
      states: [☐☐韻碼提示, ☐☑精確匹配, ☑☐輸入預測],
      }
    space:
      - { type: switch, name: yuhao_hide_space_candidates, states: [☐有空格簡, ☑無空格簡] }
    chaifen:
      - { type: switch, name: yuhao_chaifen_source, states: [☐陸標拆分, ☑臺標拆分] }
    div:
      - { type: switch, name: yuhao_chaifen_source, states: [☐陸標拆分, ☑臺標拆分] }
    trad:
      - { type: switch, name: traditionalization, states: [☐不轉換, ☑簡轉繁] }
    simp:
      - { type: switch, name: simplification, states: [☐不轉換, ☑繁轉簡] }
    full:
      - { type: switch, name: full_shape, states: [☐半角, ☑全角] }
    half:
      - { type: switch, name: full_shape, states: [☐半角, ☑全角] }
    punc:
      - { type: switch, name: ascii_punct, states: [☐中文標點, ☑西文標點] }
    dot:
      - { type: switch, name: ascii_punct, states: [☐中文標點, ☑西文標點] }
    dist:
      - type: eval
        expr: >
          return function(args)
            return string.format("librime: [%s]", rime_api.get_rime_version())
          end
      - type: eval
        expr: >
          return function(args)
            return string.format("distribution: [%s](%s/%s)",
              rime_api.get_distribution_name(),
              rime_api.get_distribution_code_name(),
              rime_api.get_distribution_version())
          end
    uni:
      - type: eval
        hijack: true
        expr: return require("yuhao.yuhao_core").unicode()
    w:
      - type: eval
        hijack: true
        expr: return require("yuhao.yuhao_core").unicode()

punctuator:
  import_preset: symbols
  half_shape:
    "`": "`"
    "@": "@"
    "#": "#"
    "%": "%"
    "*": "*"
    "\\": "、"
    "[": "「"
    "]": "」"
    "{": "『"
    "}": "』"
    "/": "/"
    "|": "|"

key_binder:
  bindings:
    - { when: always, accept: "Control+period", toggle: ascii_punct }
    - { when: always, accept: "Control+Shift+period", toggle: ascii_punct }
    - { when: always, accept: "Control+Shift+J", toggle: simplification }
    - { when: always, accept: "Control+Shift+F", toggle: traditionalization }
    - {
        when: always,
        accept: "Control+Shift+M",
        toggle: yuhao_charset_prioritizer_common,
      } # 常用字優先
    - {
        when: always,
        accept: "Control+Shift+O",
        toggle: yuhao_charset_filter_common,
      } # 常用詞過濾
    - { when: has_menu, accept: "0", toggle: yuhao_charset_filter_common }
    - { when: has_menu, accept: "/", toggle: yuhao_chaifen.off } # 拆分
    - {
        when: always,
        accept: "Control+Shift+L",
        toggle: yuhao_chaifen_source,
      } # 拆分字形
    - {
        when: always,
        accept: "Control+Shift+D",
        toggle: yuhao_single_char_only_for_full_code,
      } # 全码出单
    - {
        when: always,
        accept: "Control+Shift+K",
        toggle: yuhao_hide_space_candidates,
      } # 隱藏空格上屏字
    - {
        when: always,
        accept: "Control+Shift+Y",
        toggle: yuhao_autocompletion_filter,
      } # 輸入預測
    - { when: has_menu, accept: semicolon, send: 2 } # 分号次选
    - { when: has_menu, accept: apostrophe, send: 3 } # 引号三选
    - { when: has_menu, accept: Tab, send: 2 } # 製表符次选
    - { when: has_menu, accept: minus, send: Page_Up } # 減號上翻頁
    - { when: has_menu, accept: equal, send: Page_Down } # 等號下翻頁

recognizer:
  import_preset: default
  patterns:
    uppercase: "^(?![`;]).*[A-Z][-_+.'0-9A-Za-z]*$"
    reverse_lookup: "^z([a-z]+?)*$"
    punct: "^/([0-9]0?|[A-Za-z]+)?$"
    number: "^[-+]?[0-9][,.:0-9]*[%]?$"

style:
    inline_preedit: true  # 候選欄内置於輸入界面
    preedit_type: composition  # 候選顯示字母(composition)还是候選(preview)
    inline_candidate: false  # MacOS 候選顯示字母(false)还是候選(true)
    font_face: Yuniversus  # 字體
